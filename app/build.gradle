import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.android.application'
    id 'privacy-sentry-plugin'
}
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    //配置签名的关键信息
    signingConfigs {
        developConfig {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }
        getSigningProperties()
    }
    buildTypes {
        debug {
            minifyEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //压缩对齐生成的apk包
            zipAlignEnabled true
            // 移除无用的resource文件
            proguardFiles 'proguard-rules.pro'
            //签名配置
            signingConfig android.signingConfigs.developConfig
        }
        release {
            minifyEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //压缩对齐生成的apk包
            zipAlignEnabled true
            // 移除无用的resource文件
            proguardFiles 'proguard-rules.pro'
            //签名配置
            signingConfig android.signingConfigs.developConfig
        }
    }
}
//读取并设置 签名配置
def getSigningProperties() {
    //读取文件中的信息来配置打包签名
    android.signingConfigs.developConfig.storeFile = file("dev.keystore")
    android.signingConfigs.developConfig.storePassword = "android"
    android.signingConfigs.developConfig.keyAlias = "test"
    android.signingConfigs.developConfig.keyPassword = "android"
    // APK signature scheme v2
    // 满足下面两个条件时需要此配置
    // 1. Gradle版本 >= 2.14.1
    // 2. Android Gradle Plugin 版本 >= 2.2.0
    // 3. android-build-tools-version >= 24.0.3
    // 在没有想升级v2前 只使用旧版签名，禁用V2版签名模式
    // 升级注意检查加固发出来的包有没有问题 检查各个sdk 功能等
    // Android 7.0 会开始验证 v2 7.0以下版本没有问题
    // apksigner verify -v app.apk 查看签名版本 Using build-tools 24.0.3 and newer
    android.signingConfigs.developConfig.v1SigningEnabled = true;
    android.signingConfigs.developConfig.v2SigningEnabled = true;
}


/**
 * 有时候引用的第三方库会带有一些配置文件或者license信息，打包的时候需要去掉这些信息
 */
android.packagingOptions {
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
}

android.packagingOptions{
    pickFirst 'lib/x86/libc++_shared.so'
    pickFirst 'lib/arm64-v8a/libc++_shared.so'
    pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    pickFirst 'lib/x86_64/libc++_shared.so'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // aar依赖
    def privacyVersion = "1.3.4.2"
    implementation "com.github.allenymt.PrivacySentry:hook-sentry:$privacyVersion"
    implementation "com.github.allenymt.PrivacySentry:privacy-annotation:$privacyVersion"

    // 代理类的库，如果自己没有代理类，那么必须引用这个aar！！
    // 如果不想使用库中本身的代理方法，可以不引入这个aar，但是自己必须实现代理类！！
    // 引入privacy-proxy，也可以自定义类代理方法，优先以业务方定义的为准
    implementation "com.github.allenymt.PrivacySentry:privacy-proxy:$privacyVersion"
    // 1.2.3 新增类替换，主要是为了hook构造函数的参数，按业务方需求自己决定
    implementation "com.github.allenymt.PrivacySentry:privacy-replace:$privacyVersion"
}
